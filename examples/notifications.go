package main

import (
	"fmt"
	"github.com/HewlettPackard/oneview-golang/ov"
	"github.com/HewlettPackard/oneview-golang/utils"
	"os"
	"strconv"
)

func main() {
	var (
		ClientOV    *ov.OVClient
	)
	apiversion, _ := strconv.Atoi(os.Getenv("ONEVIEW_APIVERSION"))
	ovc := ClientOV.NewOVClient(
		os.Getenv("ONEVIEW_OV_USER"),
		os.Getenv("ONEVIEW_OV_PASSWORD"),
		os.Getenv("ONEVIEW_OV_DOMAIN"),
		os.Getenv("ONEVIEW_OV_ENDPOINT"),
		false,
		apiversion,
		"*")

	// Retrieve email notification details with configured filters
	emailNotifications, err := ovc.GetEmailNotifications("", "", "", "")
	if err != nil {
		panic(err)
	} else {
		fmt.Println("#---Get Email Notifications----#")
		for i := range emailNotifications {
			fmt.Println(emailNotifications)
		}
	}

	// Retrieve email notification filter names for a given scope
	emailNotifications, err := ovc.GetEmailNotificationsByFilter("", "", "", "")
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println("#-------------Get Email Notifications by Filter----------------#")
		fmt.Println(emailNotifications)
	}

	// Retrieve test email notification configuration details
	emailNotificationConfiguration, err := ovc.GetEmailNotificationsConfiguration("", "", "", "")
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println("#-------------Get Email Notifications by Configuration----------------#")
		fmt.Println(emailNotificationConfiguration)
	}

	// Sends test email from appliance to specified user(s).
	email = := ov.Email{
		htmlMessageBody:         "Html alert message with html and css content",
		subject:                 "Critical alert generated",
		textMessageBody:         "Plain text mail content",
		toAddress:               ["email1@example.com","email2@example.com"],
	  }
	err := ovc.SendTestEmail(email)
	if err != nil {
		fmt.Println("Sending TestEmail Failed: ", err)
	} else {
		fmt.Println("TestEmail sent successfully...")
	}

	// Sends email from appliance to specified user
	email = := ov.Email{
		htmlMessageBody:         "Html alert message with html and css content",
		subject:                 "Critical alert generated",
		textMessageBody:         "Plain text mail content",
		toAddress:               ["email1@example.com","email2@example.com"],
	  }
	err := ovc.SendEmail(email)
	if err != nil {
		fmt.Println("Sending Email Failed: ", err)
	} else {
		fmt.Println("Email sent successfully...")
	}

	// Configure the appliance to send an email notification, generated by specified alert filter queries.
	alertEmailFilter1 = ov.alertEmailFilters{disabled: false,
		displayFilter:            "status:warning status:critical",
		emails:                   ["email1@example.com","email2@example.com"],
		filter:                   "status:'warning' or  status:'critical'",
		userQueryFilter:          "CPU",
		limit:                     3,
		limitDuration:             "minute",
		scopeQuery:                "scope:'windows'",
		filterName:                "Critical Alerts"
	}
	alertEmailFilters := new([]ov.alertEmailFilters)
	*alertEmailFilters = append(*alertEmailFilters, alertEmailFilter1)
	email = := ov.EmailNotification{
		alertEmailDisabled:       false,
		alertEmailFilters:        *alertEmailFilters
		password:                 "some password",
		senderEmailAddress:       "sender@example.com",
		smtpPort:                 25,
		smtpServer:               "smtp.example.com"
		smtpProtocol:             "TLS"
	  }
	err := ovc.ConfigureAppliance(email)
	if err != nil {
		fmt.Println("Sending Email Failed: ", err)
	} else {
		fmt.Println("Email sent successfully...")
	}
}
